#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Definição da struct Sala (árvore binária da mansão)
typedef struct Sala {
    char nome[50];
    char pista[100];
    struct Sala *esquerda;
    struct Sala *direita;
} Sala;

// Definição da struct PistaNode (BST de pistas)
typedef struct PistaNode {
    char pista[100];
    struct PistaNode *esquerda;
    struct PistaNode *direita;
} PistaNode;

// Função para criar uma sala dinamicamente
Sala* criarSala(const char* nome, const char* pista) {
    Sala* novaSala = (Sala*)malloc(sizeof(Sala));
    if (!novaSala) {
        printf("Erro ao alocar memória!\n");
        exit(1);
    }
    strcpy(novaSala->nome, nome);
    strcpy(novaSala->pista, pista);
    novaSala->esquerda = NULL;
    novaSala->direita = NULL;
    return novaSala;
}

// Função para criar um nó de pista na BST
PistaNode* criarPistaNode(const char* pista) {
    PistaNode* novo = (PistaNode*)malloc(sizeof(PistaNode));
    if (!novo) {
        printf("Erro ao alocar memória!\n");
        exit(1);
    }
    strcpy(novo->pista, pista);
    novo->esquerda = NULL;
    novo->direita = NULL;
    return novo;
}

// Inserir pista na BST (em ordem alfabética)
PistaNode* inserirPista(PistaNode* raiz, const char* pista) {
    if (raiz == NULL) return criarPistaNode(pista);

    if (strcmp(pista, raiz->pista) < 0)
        raiz->esquerda = inserirPista(raiz->esquerda, pista);
    else if (strcmp(pista, raiz->pista) > 0)
        raiz->direita = inserirPista(raiz->direita, pista);
    // se igual, não insere duplicado
    return raiz;
}

// Exibir pistas em ordem alfabética (inorder traversal)
void exibirPistas(PistaNode* raiz) {
    if (raiz == NULL) return;
    exibirPistas(raiz->esquerda);
    printf("- %s\n", raiz->pista);
    exibirPistas(raiz->direita);
}

// Função para explorar a mansão e coletar pistas
void explorarSalasComPistas(Sala* atual, PistaNode** arvorePistas) {
    char escolha;

    while (atual != NULL) {
        printf("\nVocê está na sala: %s\n", atual->nome);

        if (strlen(atual->pista) > 0) {
            printf("Você encontrou uma pista: %s\n", atual->pista);
            *arvorePistas = inserirPista(*arvorePistas, atual->pista);
        }

        if (atual->esquerda == NULL && atual->direita == NULL) {
            printf("Não há mais caminhos nesta sala.\n");
            return;
        }

        printf("Escolha o caminho: (e) esquerda, (d) direita, (s) sair: ");
        scanf(" %c", &escolha);

        if (escolha == 'e' || escolha == 'E') {
            if (atual->esquerda != NULL)
                atual = atual->esquerda;
            else
                printf("Não há sala à esquerda!\n");
        } else if (escolha == 'd' || escolha == 'D') {
            if (atual->direita != NULL)
                atual = atual->direita;
            else
                printf("Não há sala à direita!\n");
        } else if (escolha == 's' || escolha == 'S') {
            printf("Exploração encerrada pelo jogador.\n");
            return;
        } else {
            printf("Opção inválida!\n");
        }
    }
}

// Função principal
int main() {
    // Criando salas da mansão com pistas
    Sala* hall = criarSala("Hall de Entrada", "Mapa da Mansão");
    Sala* cozinha = criarSala("Cozinha", "Chave da despensa");
    Sala* salaEstar = criarSala("Sala de Estar", "");
    Sala* biblioteca = criarSala("Biblioteca", "Diário antigo");
    Sala* jardim = criarSala("Jardim", "Pegadas misteriosas");
    Sala* quarto = criarSala("Quarto Secreto", "Carta enigmática");

    // Montando a árvore da mansão
    hall->esquerda = cozinha;
    hall->direita = salaEstar;
    cozinha->esquerda = biblioteca;
    cozinha->direita = jardim;
    salaEstar->direita = quarto;

    // Inicializa árvore de pistas
    PistaNode* arvorePistas = NULL;

    // Início da exploração
    printf("Bem-vindo(a) ao Detective Quest!\n");
    explorarSalasComPistas(hall, &arvorePistas);

    // Exibe todas as pistas coletadas em ordem alfabética
    printf("\nPistas coletadas em ordem alfabética:\n");
    exibirPistas(arvorePistas);

    // Liberando memória (simples)
    free(hall); free(cozinha); free(salaEstar);
    free(biblioteca); free(jardim); free(quarto);
    // Para a árvore de pistas idealmente deveria liberar todos os nós, mas omitido por simplicidade

    return 0;
}
